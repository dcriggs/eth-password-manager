/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    UserPasswordManager: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "website",
              type: "string",
            },
          ],
          name: "PasswordDeleted",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "website",
              type: "string",
            },
          ],
          name: "PasswordDetailsUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "user",
              type: "address",
            },
            {
              indexed: false,
              internalType: "string",
              name: "website",
              type: "string",
            },
          ],
          name: "PasswordStored",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "RegistrationUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "UserRegistered",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "authenticationHash",
              type: "bytes32",
            },
          ],
          name: "authenticateUser",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "authenticationHash",
              type: "bytes32",
            },
          ],
          name: "deletePassword",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "authenticationHash",
              type: "bytes32",
            },
          ],
          name: "getPasswords",
          outputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "website",
                  type: "string",
                },
                {
                  internalType: "string",
                  name: "userName",
                  type: "string",
                },
                {
                  internalType: "bytes32",
                  name: "hashedPassword",
                  type: "bytes32",
                },
              ],
              internalType: "struct UserPasswordManager.PasswordData[]",
              name: "",
              type: "tuple[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "greeting",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "isUserRegistered",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hashedPassword",
              type: "bytes32",
            },
          ],
          name: "registerUser",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "website",
              type: "string",
            },
            {
              internalType: "string",
              name: "userName",
              type: "string",
            },
            {
              internalType: "bytes32",
              name: "hashedPassword",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "authenticationHash",
              type: "bytes32",
            },
          ],
          name: "storePassword",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "index",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "website",
              type: "string",
            },
            {
              internalType: "string",
              name: "userName",
              type: "string",
            },
            {
              internalType: "bytes32",
              name: "newHashedPassword",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "authenticationHash",
              type: "bytes32",
            },
          ],
          name: "updatePasswordDetails",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "authenticationHash",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "newHashedPassword",
              type: "bytes32",
            },
          ],
          name: "updateRegistrationPassword",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
